import { asInt } from "ts-extended-types";
import { PostgreSql } from "ts-sql-query/databases/PostgreSql";
import { SelectValues } from "ts-sql-query/expressions/select";
import { PgPoolQueryRunner } from "ts-sql-query/queryRunners/PgPoolQueryRunner";
import { Table } from "ts-sql-query/Table";
import { dbPool } from "../../db/src/run_on_pool";
import { DBConnection, DbInsertSets, MyDb } from "./db";

class KursteilnehmerTable extends Table<MyDb> {
  id = this.autogeneratedPrimaryKey("id", "int");
  kursId = this.column("kurs_id", "int");
  teilnehmerId = this.column("teilnehmer_id", "int");
  constructor() {
    super("kurs_teilnehmer");
  }
}

const kursteilnehmerTableInstance = new KursteilnehmerTable();

export interface Kursteilnehmer {
  id: number;
  kursId: number;
  teilnehmerId: number;
}

const selectKursteilnehmer: SelectValues<
  MyDb & PostgreSql,
  KursteilnehmerTable,
  Kursteilnehmer
> = {
  id: kursteilnehmerTableInstance.id,
  kursId: kursteilnehmerTableInstance.kursId,
  teilnehmerId: kursteilnehmerTableInstance.teilnehmerId,
};

function adaptKursteilnehmerToDb(
  kursteilnehmer: Kursteilnehmer
): DbInsertSets<KursteilnehmerTable> {
  return {
    id: asInt(kursteilnehmer.id),
    kursId: asInt(kursteilnehmer.kursId),
    teilnehmerId: asInt(kursteilnehmer.teilnehmerId),
  };
}

export class KursteilnehmerDto {
  private static getConnection(): DBConnection {
    return new DBConnection(new PgPoolQueryRunner(dbPool));
  }

  public static findById(id: number): Promise<Kursteilnehmer> {
    return this.getConnection()
      .selectFrom(kursteilnehmerTableInstance)
      .where(kursteilnehmerTableInstance.id.equals(asInt(id)))
      .select(selectKursteilnehmer)
      .executeSelectOne();
  }

  public static findAll(): Promise<Kursteilnehmer[]> {
    return this.getConnection()
      .selectFrom(kursteilnehmerTableInstance)
      .select(selectKursteilnehmer)
      .executeSelectMany();
  }

  public static insert(
    kursteilnehmer: Kursteilnehmer
  ): Promise<Kursteilnehmer["id"]> {
    return this.getConnection()
      .insertInto(kursteilnehmerTableInstance)
      .values(adaptKursteilnehmerToDb(kursteilnehmer))
      .returningLastInsertedId()
      .executeInsert();
  }
}
