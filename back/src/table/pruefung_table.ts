import { asInt, LocalDate } from "ts-extended-types";
import { PostgreSql } from "ts-sql-query/databases/PostgreSql";
import { SelectValues } from "ts-sql-query/expressions/select";
import { PgPoolQueryRunner } from "ts-sql-query/queryRunners/PgPoolQueryRunner";
import { Table } from "ts-sql-query/Table";
import { dbPool } from "../../db/src/run_on_pool";
import { DBConnection, DbInsertSets, MyDb } from "./db";

class PruefungTable extends Table<MyDb> {
  id = this.autogeneratedPrimaryKey("id", "int");
  prueferId = this.column("pruefer_id", "int");
  kursId = this.column("kurs_id", "int");
  date = this.column("date", "localDate");
  constructor() {
    super("pruefung");
  }
}

const pruefungTableInstance = new PruefungTable();

export interface Pruefung {
  id: number;
  prueferId: number;
  kursId: number;
  date: LocalDate;
}

const selectPruefung: SelectValues<
  MyDb & PostgreSql,
  PruefungTable,
  Pruefung
> = {
  id: pruefungTableInstance.id,
  prueferId: pruefungTableInstance.prueferId,
  kursId: pruefungTableInstance.kursId,
  date: pruefungTableInstance.date,
};

function adaptPruefungToDb(pruefung: Pruefung): DbInsertSets<PruefungTable> {
  return {
    id: asInt(pruefung.id),
    prueferId: asInt(pruefung.prueferId),
    kursId: asInt(pruefung.kursId),
    date: pruefung.date,
  };
}

export class PruefungDto {
  private static getConnection(): DBConnection {
    return new DBConnection(new PgPoolQueryRunner(dbPool));
  }

  public static findById(id: number): Promise<Pruefung> {
    return this.getConnection()
      .selectFrom(pruefungTableInstance)
      .where(pruefungTableInstance.id.equals(asInt(id)))
      .select(selectPruefung)
      .executeSelectOne();
  }

  public static findAll(): Promise<Pruefung[]> {
    return this.getConnection()
      .selectFrom(pruefungTableInstance)
      .select(selectPruefung)
      .executeSelectMany();
  }

  public static insert(pruefung: Pruefung): Promise<Pruefung["id"]> {
    return this.getConnection()
      .insertInto(pruefungTableInstance)
      .values(adaptPruefungToDb(pruefung))
      .returningLastInsertedId()
      .executeInsert();
  }
}
