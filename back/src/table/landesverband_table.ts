import { PostgreSql } from "ts-sql-query/databases/PostgreSql";
import { SelectValues } from "ts-sql-query/expressions/select";
import { PgPoolQueryRunner } from "ts-sql-query/queryRunners/PgPoolQueryRunner";
import { Table } from "ts-sql-query/Table";
import { dbPool } from "../../db/src/run_on_pool";
import { DBConnection, MyDb } from "./db";

class LandesverbandTable extends Table<MyDb> {
  id = this.autogeneratedPrimaryKey("id", "int");
  name = this.column("name", "string");
  constructor() {
    super("landesverband");
  }
}

const landesverbandTableInstance = new LandesverbandTable();

export interface Landesverband {
  id: number;
  name: string;
}

const selectLandesverband: SelectValues<
  MyDb & PostgreSql,
  LandesverbandTable,
  Landesverband
> = {
  id: landesverbandTableInstance.id,
  name: landesverbandTableInstance.name,
};

export class LandesverbandDto {
  private static getConnection(): DBConnection {
    return new DBConnection(new PgPoolQueryRunner(dbPool));
  }

  public static findById(id: number): Promise<Landesverband> {
    return this.getConnection()
      .selectFrom(landesverbandTableInstance)
      .where(landesverbandTableInstance.id.equals(id))
      .select(selectLandesverband)
      .executeSelectOne();
  }

  public static findAll(): Promise<Landesverband[]> {
    return this.getConnection()
      .selectFrom(landesverbandTableInstance)
      .select(selectLandesverband)
      .executeSelectMany();
  }

  public static insert(
    landesverband: Landesverband
  ): Promise<Landesverband["id"]> {
    return this.getConnection()
      .insertInto(landesverbandTableInstance)
      .values(landesverband)
      .returningLastInsertedId()
      .executeInsert();
  }
}
