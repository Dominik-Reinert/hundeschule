import { asInt } from "ts-extended-types";
import { PgPoolQueryRunner } from "ts-sql-query/queryRunners/PgPoolQueryRunner";
import { dbPool } from "../../db/src/run_on_pool";
import { DBConnection, DbInsertSets, DbSelectValues, DbTable } from "./db";

export class PersonTable extends DbTable {
  id = this.autogeneratedPrimaryKey("id", "int");
  vorname = this.column("vorname", "string");
  name = this.column("name", "string");
  email = this.column("email", "string");
  adresse = this.optionalColumn("adresse", "string");
  dvgId = this.optionalColumn("dvg_id", "int");
  constructor() {
    super("person");
  }
}

export const personTableInstance = new PersonTable();

export interface Person {
  vorname: string;
  name: string;
  email: string;
  id?: number;
  dvgId?: number | undefined | null;
  adresse?: string | undefined | null;
}

const selectPerson: DbSelectValues<PersonTable, Person> = {
  id: personTableInstance.id,
  vorname: personTableInstance.vorname,
  name: personTableInstance.name,
  email: personTableInstance.email,
  dvgId: personTableInstance.dvgId,
  adresse: personTableInstance.adresse,
};

function adaptPersonToDb(person: Person): DbInsertSets<PersonTable> {
  const result: DbInsertSets<PersonTable> = {
    name: person.name,
    vorname: person.vorname,
    adresse: person.adresse,
    email: person.email,
  };
  if (person.id) {
    result.id = asInt(person.id);
  }
  if (person.dvgId) {
    result.dvgId = asInt(person.dvgId);
  }
  return result;
}

export class PersonDto {
  private static getConnection(): DBConnection {
    return new DBConnection(new PgPoolQueryRunner(dbPool));
  }

  public static findById(id: number): Promise<Person> {
    return this.getConnection()
      .selectFrom(personTableInstance)
      .where(personTableInstance.id.equals(asInt(id)))
      .select(selectPerson)
      .executeSelectOne();
  }

  public static findAll(): Promise<Person[]> {
    return this.getConnection()
      .selectFrom(personTableInstance)
      .select(selectPerson)
      .executeSelectMany();
  }

  public static insert(
    person: Person,
    connection: DBConnection = this.getConnection()
  ): Promise<Person["id"]> {
    return connection
      .insertInto(personTableInstance)
      .values(adaptPersonToDb(person))
      .returningLastInsertedId()
      .executeInsert();
  }
}
