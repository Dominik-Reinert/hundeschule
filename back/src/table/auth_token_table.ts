import { asInt, LocalDate } from "ts-extended-types";
import { PostgreSql } from "ts-sql-query/databases/PostgreSql";
import { SelectValues } from "ts-sql-query/expressions/select";
import { PgPoolQueryRunner } from "ts-sql-query/queryRunners/PgPoolQueryRunner";
import { dbPool } from "../../db/src/run_on_pool";
import { DBConnection, DbInsertSets, DbSelectValues, DbTable, MyDb } from "./db";

class AuthTokenTable extends DbTable {
  personId = this.autogeneratedPrimaryKey("person_id", "int");
  token = this.column("token", "string");
  lastUsed = this.column("last_used", "localDate");
  constructor() {
    super("auth_token");
  }
}

export const authtokenTableInstance = new AuthTokenTable();

export interface AuthToken {
  personId: number;
  token: string;
  lastUsed: LocalDate;
}

const selectAuthToken: DbSelectValues<
  AuthTokenTable,
  AuthToken
> = {
  personId: authtokenTableInstance.personId,
  token: authtokenTableInstance.token,
  lastUsed: authtokenTableInstance.lastUsed,
};

function adaptAuthTokenToDb(
  authtoken: AuthToken
): DbInsertSets<AuthTokenTable> {
  return {
    personId: asInt(authtoken.personId),
    token: authtoken.token,
    lastUsed: authtoken.lastUsed,
  };
}

export class AuthTokenDto {
  private static getConnection(): DBConnection {
    return new DBConnection(new PgPoolQueryRunner(dbPool));
  }

  public static findByPersonId(personId: number): Promise<AuthToken> {
    return this.getConnection()
      .selectFrom(authtokenTableInstance)
      .where(authtokenTableInstance.personId.equals(asInt(personId)))
      .select(selectAuthToken)
      .executeSelectOne();
  }

  public static findAll(): Promise<AuthToken[]> {
    return this.getConnection()
      .selectFrom(authtokenTableInstance)
      .select(selectAuthToken)
      .executeSelectMany();
  }

  public static async insert(authtoken: AuthToken): Promise<void> {
    await this.getConnection()
      .insertInto(authtokenTableInstance)
      .values(adaptAuthTokenToDb(authtoken))
      .executeInsert();
  }
}
