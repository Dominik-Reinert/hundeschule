import { resolve } from "path";
import { Pool, PoolClient } from "pg";
import { PostgreSqlConnection } from "ts-sql-query/connections/PostgreSqlConnection";
import { PostgreSql } from "ts-sql-query/databases/PostgreSql";
import { TypeUnsafeDB } from "ts-sql-query/databases/TypeUnsafeDB";
import { PgPoolQueryRunner } from "ts-sql-query/queryRunners/PgPoolQueryRunner";
import { Table } from "ts-sql-query/Table";

const creds = require(resolve(
  __dirname,
  "../../../creds/postgresql.creds.json"
));
const { user, password, database } = creds;
const dbPool = new Pool({
  user,
  password,
  database,
});

export async function getPoolClient(): Promise<PoolClient> {
  return dbPool.connect();
}

export async function createPoolTransaction(
  transactionQueries: (client: PoolClient) => Promise<void>
): Promise<void> {
  const client = await dbPool.connect();
  try {
    await client.query("BEGIN");
    await transactionQueries(client);
    await client.query("COMMIT");
  } catch (e) {
    await client.query("ROLLBACK");
    throw e;
  } finally {
    client.release();
  }
}

export async function createPoolQuery<T = void>(
  query: (client: PoolClient) => Promise<T>
): Promise<T> {
  const client = await dbPool.connect();
  let result: T;
  try {
    result = await query(client);
  } catch (e) {
    throw e;
  } finally {
    client.release();
  }
  return result;
}

class MyDb implements PostgreSql, TypeUnsafeDB {
  public __PostgreSql: "PostgreSql" = "PostgreSql";
  public __AnyDB: "AnyDB" = "AnyDB";
  public __TypeUnsafe: "TypeUnsafe" = "TypeUnsafe";
}

class TCustomer extends Table<MyDb> {
  id = this.autogeneratedPrimaryKey("id", "int");
  firstName = this.column("vorname", "string");
  lastName = this.column("name", "string");
  constructor() {
    super("person"); // table name in the database
  }
}

const tPerson = new TCustomer();

class DBConnection extends PostgreSqlConnection<MyDb, "hundeschule"> {}

export async function getSinglePerson(
  id: number
): Promise<{ id: number; vorname: string; name: string }> {
  const connection = new DBConnection(new PgPoolQueryRunner(dbPool));
  return connection
    .selectFrom(tPerson)
    .where(tPerson.id.equals(id))
    .select({
      id: tPerson.id,
      vorname: tPerson.firstName,
      name: tPerson.lastName,
    })
    .executeSelectOne();
}
